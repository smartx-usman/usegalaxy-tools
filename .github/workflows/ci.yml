# This is a basic workflow to help you get started with Actions
name: Galaxy Tool Linting and Deployment Tests for push and PR

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  GALAXY_REPO: https://github.com/galaxyproject/galaxy
  GALAXY_RELEASE: release_20.05

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    name: Setup cache and determine changed repositories
    runs-on: self-hosted
    strategy:
      matrix:
        python-version: [ '3.x']
    steps:
      - name: Print github context properties
        run: |
          echo 'event: ${{ github.event_name }}'
          echo 'sha: ${{ github.sha }}'
          echo 'ref: ${{ github.ref }}'
          echo 'head_ref: ${{ github.head_ref }}'
          echo 'base_ref: ${{ github.base_ref }}'
          echo 'event.before: ${{ github.event.before }}'
          echo 'event.after: ${{ github.event.after }}'

      - name: Python version installed
        run: python3 --version

      - uses: actions/checkout@v1

      - name: Determine latest galaxy commit
        run: echo ::set-env name=GALAXY_HEAD_SHA::$(git ls-remote ${{ env.GALAXY_REPO }} refs/heads/${{ env.GALAXY_RELEASE }} | cut -f1)

      - name: Save latest galaxy commit to artifact file
        run: echo ${{ env.GALAXY_HEAD_SHA }} > galaxy.sha

      - name: Latest galaxy commit SHA
        run: cat galaxy.sha

      - uses: actions/upload-artifact@v2
        with:
          name: Workflow artifacts
          path: galaxy.sha

      - name: Cache .cache/pip
        uses: actions/cache@v2
        id: cache-pip
        with:
          path: ~/.cache/pip
          key: pip_cache_py_gxy_${{ env.GALAXY_HEAD_SHA }}

      - name: Cache .planemo
        uses: actions/cache@v2
        id: cache-planemo
        with:
          path: ~/.planemo
          key: planemo_cache_py_gxy_${{ env.GALAXY_HEAD_SHA }}

      - name: Install Planemo
        run: pip3 install planemo

      - name: Branch names
        run: echo running on the branch ${GITHUB_REF##*/}

      - name: Directory structure
        run: git diff ${{ github.head_ref }}..${{ github.base_ref }} --color=never --name-status

      - name: Detecting changes to tool files
        run: |
          COMMIT_RANGE=origin/master;
          TOOLSET= ;
          . ./.ci/repos.conf;
          while read op path; do
              if [ -n "$TOOLSET" -a "$TOOLSET" != "${path%%/*}" ]; then
                  [ -t 0 ] && echo -e '\033[0;31mERROR:' "$@" '\033[0m' || echo 'ERROR:' "$@" "Changes to tools in multiple toolsets found: ${TOOLSET} != ${path%%/*}"
              elif [ -z "$TOOLSET" ]; then
                  TOOLSET="${path%%/*}"
              fi

              case "${path##*.}" in
                  lock)
                      ;;
                  *)
                      continue
                      ;;
              esac
              case "$op" in
                  A|M)
                      echo "$op $path"
                      TOOL_YAMLS+=("${path}")
                      ;;
              esac
          done < <(git diff ${{ github.head_ref }}..${{ github.base_ref }} --color=never --name-status -- $(for d in "${!TOOLSET_REPOS[@]}"; do echo "${d}/"; done))

          declare -p TOOLSET TOOL_YAMLS;

          [ ${#TOOL_YAMLS[@]} -gt 0 ] || echo 'No tool changes, terminating';

          echo "Getting repo for toolset: ${TOOLSET}";

          REPO="${TOOLSET_REPOS[$TOOLSET]}";
          declare -p REPO;

  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted
    needs: setup

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
